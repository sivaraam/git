#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# START : NOTES FOR A COMMIT FROM COMMIT MESSAGE
# Script that allows you to enter notes for a commit while entering the
# commit message in the editor.
#
# **NOTE** : It depends on the "prepare-commit-msg" and "post-commit"
# hooks. They are to be enabled for it to function correctly.
NOTES_HEADER='---------- NOTES : START ----------'
NOTES_FOOTER='----------- NOTES : END -----------'
GIT_DIR=`git rev-parse --git-dir`
TEMP_NOTES_FILE="$GIT_DIR/NOTES-FOR-HEAD"

save_notes_to_file() {
  sed -n "/$NOTES_HEADER/,/$NOTES_FOOTER/ {
    /$NOTES_HEADER/n
    /$NOTES_FOOTER/ !{
      p
    }
  }" "$1" >"$TEMP_NOTES_FILE"
}

delete_notes_from_message() {
  sed -i "/$NOTES_HEADER/,/$NOTES_FOOTER/ d" "$1"
}

grep -q -e "^$NOTES_HEADER" "$1" && save_notes_to_file "$1" && delete_notes_from_message "$1"
# END : NOTES FOR A COMMIT FROM COMMIT MESSAGE


# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}
